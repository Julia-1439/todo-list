IMPORT { TodoItem } from "todoItem.js"
IMPORT { Project } from "project.js"

SET classes TO [ChecklistItem, TodoItem, Project]
// An object containing key-value pairs of class names to classes
SET classAccessor TO Object.fromEntries(classes.map((c) => [c.name, c]))

FUNC isStorageAvailable() 
  RETURN {Boolean} whether localStorage is available, implemented per MDN's example

// item {Project | TodoItem | ChecklistItem}
FUNC serialize(item):
  SET item.createdBy TO item.constructor.name
  CALL classAccessor.creator.dehydrate(item)
  CALL JSON.stringify WITH item INTO serializedItem
  RETURN {String} serializedItem

// value {String}
FUNC deserialize([key, value]):
  CALL JSON.parse WITH value INTO deserializedItem
  CREATE the item USING new classAccessor.creator.rehydrate(val, key) INTO item
  RETURN item

// Create a new entry or Update an existing entry 
FUNC post(item)
   CALL serialize WITH item
   CALL localStorage.setItem WITH key as uuid AND value as serilization

// Get item from localStorage of type {Project | TodoItem | ChecklistItem}
FUNC get(uuid)
  CALL localStorage.getItem WITH uuid INTO value
  IF value is non-null:
    CALL deserialize(uuid, value) on value INTO item 
  RETURN item

FUNC delete(uuid)
  CALL localStorage.removeItem WITH uuid

// @TODO how do you connect it all back together???
// PURPOSE: called once on page load
FUNC getAllProjects()
  REHYDRATE every item in localStorage USING get
  FOR EACH project:
    ITERATE 

EXPORT:
  getAllProjects
  post
  delete
  // ? maybe I should work on internalController first. 